/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.inconso.rf.android.ui;

import com.inconso.rf.android.exceptions.UnauthorizedException;
import com.inconso.rf.android.update.Updater;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Terminal updater UI.
 * @author YRadi <yradi@inconso.es>
 */
public class UpdaterUI extends javax.swing.JFrame {

	/**
	 * Updater.
	 */
	private final Updater updater		= new Updater();
	
	/**
	 * File Chooser.
	 */
	private final JFileChooser	browser	= new JFileChooser();
	
	/**
	 * Apk path to be installed or restored with.
	 */
	private String file_path;
	
    /**
     * Creates new form UpdaterUI
     */
    public UpdaterUI() {
		try {
			initComponents();
			this.setLocationRelativeTo(null);
			updater.init();
		} catch (IOException ex) {
			Logger.getLogger(UpdaterUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
			Logger.getLogger(UpdaterUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceList = new javax.swing.JList<>();
        addDeviceBtn = new javax.swing.JButton();
        deleteDeviceBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfFilePath = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        connectBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tfPort = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        installBtn = new javax.swing.JButton();
        restoreBtn = new javax.swing.JButton();
        disconnectBtn = new javax.swing.JButton();
        tfNewDevice = new javax.swing.JTextField();
        portBtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Terminal Updater");

        jLabel1.setText("Devices:");
        jLabel1.setToolTipText("Devices to which perform installation or restoration operations.");

        deviceList.setToolTipText("Devices list.");
        jScrollPane1.setViewportView(deviceList);

        addDeviceBtn.setText("Add");
        addDeviceBtn.setToolTipText("Add device to the list.");
        addDeviceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeviceBtnActionPerformed(evt);
            }
        });

        deleteDeviceBtn.setText("Delete");
        deleteDeviceBtn.setToolTipText("Delete the selected device from the list.");
        deleteDeviceBtn.setEnabled(false);
        deleteDeviceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDeviceBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("File:");
        jLabel2.setToolTipText("File to be used on installation or restoration.");

        tfFilePath.setEditable(false);

        browseBtn.setText("Browse");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        connectBtn.setText("Connect");
        connectBtn.setToolTipText("Connect to the list's devices.");
        connectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Port:");
        jLabel3.setToolTipText("Port to perform operations through. If no port is specified, 5037 is used by default.");

        installBtn.setText("Install");
        installBtn.setToolTipText("Install the specified file to the list's devices.");
        installBtn.setEnabled(false);

        restoreBtn.setText("Restore");
        restoreBtn.setToolTipText("Perform a restoration to the list's devices using the specified file.");
        restoreBtn.setEnabled(false);
        restoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreBtnActionPerformed(evt);
            }
        });

        disconnectBtn.setText("Close connection");
        disconnectBtn.setToolTipText("Clear all fields data.");
        disconnectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectBtnActionPerformed(evt);
            }
        });

        tfNewDevice.setToolTipText("Input here a new device's IP to be added to the list.");

        portBtn.setText("Setup");
        portBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portBtnActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(connectBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(deleteDeviceBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfNewDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(addDeviceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(portBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tfFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(browseBtn))))
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSeparator1)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(disconnectBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(restoreBtn)
                            .addGap(27, 27, 27)
                            .addComponent(installBtn)
                            .addGap(20, 20, 20))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(browseBtn)
                        .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portBtn))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteDeviceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addDeviceBtn)
                        .addComponent(tfNewDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(connectBtn)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(installBtn)
                    .addComponent(restoreBtn)
                    .addComponent(disconnectBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portBtnActionPerformed
		try {
			if(!this.tfPort.getText().equals("")) {
				int n = Integer.parseInt(this.tfPort.getText().toString());
				if (n > 5558 || n < 5555) throw new NumberFormatException();
				updater.setPort(this.tfPort.getText().toString());
			}
			JOptionPane.showMessageDialog(null, "System port set up.", "Success", JOptionPane.INFORMATION_MESSAGE);
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(null, "Must be a number between 5555 and 5558.", "Invalid Port", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_portBtnActionPerformed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        int result = this.browser.showOpenDialog(this);
		if(result == JFileChooser.OPEN_DIALOG) {
			this.setFile_path(this.browser.getSelectedFile().getAbsolutePath());
			this.tfFilePath.setText(this.getFile_path());
			this.installBtn.setEnabled(true);
			this.restoreBtn.setEnabled(true);
		}
    }//GEN-LAST:event_browseBtnActionPerformed

    private void addDeviceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeviceBtnActionPerformed
        try {
			updater.addDeviceIp(this.tfNewDevice.getText().toString());
			this.tfNewDevice.setText("");
			this.deviceList.setListData(updater.getIpTable().keySet().toArray(new String[0]));
			if(updater.getIpTable().size() > 0 && !this.deleteDeviceBtn.isEnabled()) this.deleteDeviceBtn.setEnabled(true);
		} catch(NumberFormatException | StringIndexOutOfBoundsException e) {
			JOptionPane.showMessageDialog(null, "Invalid Device IP.", "Error", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_addDeviceBtnActionPerformed

    private void deleteDeviceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDeviceBtnActionPerformed
		try {
			int index = this.deviceList.getSelectedIndex();
			this.updater.getIpTable().remove(this.deviceList.getModel().getElementAt(index));
			this.deviceList.setListData(updater.getIpTable().keySet().toArray(new String[0]));
			if(this.updater.getIpTable().size() < 1) {
				this.deleteDeviceBtn.setEnabled(false);
			}
		} catch(ArrayIndexOutOfBoundsException e) {
			JOptionPane.showMessageDialog(null, "Must select a Device IP first.", "Error", JOptionPane.ERROR_MESSAGE);
		}
		
    }//GEN-LAST:event_deleteDeviceBtnActionPerformed

    private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed
		try {
			updater.connect();
			JOptionPane.showMessageDialog(null, "Successfully connected to listed devices.", "Success", JOptionPane.INFORMATION_MESSAGE);	
		} catch (IOException ex) {
			try {
				JOptionPane.showMessageDialog(null, "Could not connect to listed devices.", "Error", JOptionPane.ERROR_MESSAGE);
				updater.disconnect();
			} catch (IOException ex1) {
				Logger.getLogger(UpdaterUI.class.getName()).log(Level.SEVERE, null, ex1);
			} catch (InterruptedException ex1) {
				Logger.getLogger(UpdaterUI.class.getName()).log(Level.SEVERE, null, ex1);
			}
		} catch (InterruptedException ex) {
			Logger.getLogger(UpdaterUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_connectBtnActionPerformed

    private void disconnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectBtnActionPerformed
		try {
			updater.disconnect();
			JOptionPane.showMessageDialog(null, "Connection closed.", "Success", JOptionPane.INFORMATION_MESSAGE);
		} catch (IOException | InterruptedException ex) {
			JOptionPane.showMessageDialog(null, "Could not close connection.", "Error", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_disconnectBtnActionPerformed

    private void restoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreBtnActionPerformed
        try {
			updater.restore(this.tfFilePath.getText().toString());
		} catch (IOException e) {
			Logger.getLogger(UpdaterUI.class.getName()).log(Level.SEVERE, null, e);
		} catch (InterruptedException ex) {
			Logger.getLogger(UpdaterUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (UnauthorizedException ex) {
			JOptionPane.showMessageDialog(null, "Unauthorized device.\nPlease check the confirmation dialog on your device.", "Error", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_restoreBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdaterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdaterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdaterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdaterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdaterUI().setVisible(true);
            }
        });
    }

	public String getFile_path() {
		return file_path;
	}

	public void setFile_path(String file_path) {
		this.file_path = file_path;
	}
	
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDeviceBtn;
    private javax.swing.JButton browseBtn;
    private javax.swing.JButton connectBtn;
    private javax.swing.JButton deleteDeviceBtn;
    private javax.swing.JList<String> deviceList;
    private javax.swing.JButton disconnectBtn;
    private javax.swing.JButton installBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton portBtn;
    private javax.swing.JButton restoreBtn;
    private javax.swing.JTextField tfFilePath;
    private javax.swing.JTextField tfNewDevice;
    private javax.swing.JTextField tfPort;
    // End of variables declaration//GEN-END:variables
}
